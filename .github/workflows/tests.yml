name: CI

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  ruff:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-ruff-${{ runner.os }}-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            pip-ruff-${{ runner.os }}-
      
      - name: Install ruff
        run: python -m pip install ruff
      
      - name: Run Ruff
        run: ruff check

  mypy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-mypy-${{ runner.os }}-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            pip-mypy-${{ runner.os }}-
      
      - name: Install dependencies for mypy
        run: python -m pip install -e .[dev]
      
      - name: Run Mypy
        run: bash scripts/run_mypy.sh

  unit-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-tests-${{ runner.os }}-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            pip-tests-${{ runner.os }}-
      
      - name: Cache demo data
        uses: actions/cache@v4
        with:
          path: |
            DOTTDEMO.ZIP
            DOTTDEMO.000
            DOTTDEMO.001
            DOTTDEMO.bsc6
          key: demo-data-${{ hashFiles('converter/cli.py') }}
          restore-keys: |
            demo-data-
      
      - name: Install dependencies
        run: python -m pip install -e .[dev]
      
      - name: Download and prepare demo data
        run: |
          if [ ! -f DOTTDEMO.ZIP ]; then
            echo "üì• Downloading demo data..."
            curl -L -o DOTTDEMO.ZIP https://archive.org/download/DayOfTheTentacleDemo/DOTTDEMO.ZIP || echo "Demo download failed, tests will be skipped"
          else
            echo "‚úÖ Demo data already cached"
          fi
          
          if [ -f DOTTDEMO.ZIP ] && [ ! -f DOTTDEMO.000 ]; then
            echo "üìÇ Extracting demo data..."
            unzip -q DOTTDEMO.ZIP
          fi
          
          if [ -f DOTTDEMO.000 ] && [ -f DOTTDEMO.001 ] && [ ! -f DOTTDEMO.bsc6 ]; then
            echo "üîÑ Converting demo data..."
            python converter/cli.py DOTTDEMO.000 DOTTDEMO.001 -o DOTTDEMO.bsc6 || echo "Demo conversion failed, tests will be skipped"
          fi
      
      - name: Run Pytest with coverage
        run: python scripts/run_pytest_direct.py
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        if: success()

  summary:
    runs-on: ubuntu-latest
    needs: [ruff, mypy, unit-tests]
    if: always()
    
    steps:
    - name: Check overall status
      run: |
        echo "üîç Checking CI results..."
        echo "Ruff: ${{ needs.ruff.result }}"
        echo "Mypy: ${{ needs.mypy.result }}"
        echo "Unit Tests: ${{ needs.unit-tests.result }}"
        
        if [ "${{ needs.ruff.result }}" == "success" ] && [ "${{ needs.mypy.result }}" == "success" ] && [ "${{ needs.unit-tests.result }}" == "success" ]; then
          echo "‚úÖ All CI checks passed!"
        else
          echo "‚ùå Some CI checks failed"
          exit 1
        fi
